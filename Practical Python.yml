# Python 切片操作反转字符串
from django.http import HttpResponse

my_string = "ABCDE"
reversed_string = my_string[::-1]
print(reversed_string)

# 首字母大写
my_string = "my name is tim shu"
new_string = my_string.title()
print(new_string)

# 在字符串中查找唯一元素
my_string = "zzxxccvvbbnnmm"
# converting the to a set
temp_set = set(my_string)
# stitching set into a string using join
new_string = ''.join(temp_set)
print(new_string)

# n次打印字符串或列表（您可以对字符串或列表使用乘法（*）。 我们可以将它们任意复制。）
n = 3  # number of repetitions
my_string = "abcd"
my_list = [1, 2, 3]
print(my_string * n)
print(my_list * n)
# 一个有趣的用例是定义一个具有恒定值的列表——假设为零。
n = 4
my_list = [0] * n

# 列表推导式（列表推导式为我们提供了一种在其他列表基础上创建列表的好方法，以下代码段通过将旧列表的每个元素乘以 2 来创建新列表）
# Multiplying each element in a list by 2
original_list = [1, 2, 3, 4]
new_list = [2 * x for x in original_list]
print(new_list)

# 变量交换
# Python 在两个变量之间交换值而不使用另一个变量变得非常简单。
a = 1
b = 2
a, b = b, a
print(a)
print(b)

# 将字符串拆分为子字符串列表
string_1 = "My name is Tim shu"
string_2 = "sample/ string 2"
# default separator ''
print(string_1.split())
# defining separator as '/'
print(string_2.split('/'))

# 将字符串列表组合单个字符串
# join（）将作为参数传递的字符串列表组合为单个字符串。这种情况下，我们使用逗号分隔符将它们分开。
list_of_strings = ['My', 'name', 'is', 'Tim', 'shu']
# Using join with the comma separator
print(','.join(list_of_strings))

# 检查回文字符串
my_string = "abcba"
if my_string == my_string[::-1]:
    print("palindrome")
else:
    print("not palindrome")

#  查找两个字符串是否为字母
# Counter 类的一个有趣应用是查找字谜。
# 字谜是通过重新排列不同单词或短语的字母而形成的单词或短语。
# 如果两个字符串的 Counter 对象相等，那么它们就是字谜。
from collections import Counter

str_1, str_2, str_3 = "abcde", "abcdd", "abcda"
cnt_1, cnt_2, cnt_3, = Counter(str_1), Counter(str_2), Counter(str_3)
if cnt_1 == cnt_2:
    print('1 and 2 anagram')
if cnt_1 == cnt_3:
    print('1 and 3 anagram')

# 使用 try-except-else 块
# 使用 try / except 块可以轻松完成 Python 中的错误处理，向该块添加 else 语句可能会很有用，在 try 块中没有引发异常的情况下运行。
# 如果您需要运行某些程序，无需考虑异常，请继续使用。
a, b = 1, 0
try:
    print(a / b)
    # exception raised when b is 0
except ZeroDivisionError:
    print("division by zero")
else:
    print("no exceptions raised")
finally:
    print("Run this always")

# 使用枚举获取索引 / 值对
# 以下脚本使用枚举遍历列表中的值及其索引。
my_list = ['a', 'b', 'c', 'd', 'e']
for index, value in enumerate(my_list):
    print('{0} : {1}'.format(index, value))

# 检查对象的内存使用情况
# 以下脚本可用于检查对象的内存使用情况
import sys

num = 21
print(sys.getsizeof(num))

# 合并二个字典
# 在 Python 2 中，我们使用了 update（）方法来合并两个字典， Python 3.5 使这一过程变得更加简单。
# 在下面给出的脚本中，两个字典被合并。 在相交的情况下，使用第二个字典中的值。
dict_1 = {'apple': 9, 'banner': 6}
dict_2 = {'banana': 4, 'orange': 8}
combined__dict = {**dict_1, **dict_2}
print(combined__dict)

# 执行一段代码所需要的时间
# 以下代码片段使用库函数来计算执行代码所需的时间消耗。
import time

start_time = time.time()
# Code to check folows
a, b = 1, 2
c = a + b
# Code to check ends
end_time = time.time()
time_taken_in_micro = (end_time - start_time) * (10 * 6)
print(" Time taken in micro_seconds : {0} ms").format(time_taken_in_micro)

# 展平列表清单
# 有时，您不确定列表的嵌套深度，只希望将所有元素放在一个平面列表中。
# https://www.infoq.cn/article/tzyzWOWUWFpX3ieByYbg?utm_source=7d_hot&utm_medium=article
# 从列表中随机取样
import random

my_list = ['a', 'b', 'c', 'd', 'e']
num_samples = 2
samples = random.sample(my_list, num_samples)
print(samples)
# 我一直推荐秘密库生成随机样本进行加密， 以下代码段仅适用于 Python 3
import secrets

secret_random = secrets.SystemRandom()
my_list = ['a', 'b', 'c', 'd', 'e']
num_samples = 2
samples = secret_random.sample(my_list, num_samples)
print(samples)

# 数字化
num = 123456
# using map
list_of_digits = list(map(int, str(num)))
print(list_of_digits)
[1, 2, 3, 4, 5, 6]
# using list comprehension
list_of_digits = [int(x) for x in str(num)]
print(list_of_digits)
[1, 2, 3, 4, 5, 6]

# 检查唯一性
def unique(l):
    if len(l) == len(set(l)):
        print("All elements are unique")
    else:
        print("List has duplicates")
unique([1, 2, 3, 4])
unique([1, 1, 3, 4])


def display_meta(request):
    values = request.META.items()
    values.sort()
    html = []
    for k, v in values:
        html.append('<tr><td>%s</td><td>%s</td></tr>' % (k, v))
    return HttpResponse('<table>%s</table>' % '\n' .join(html))


